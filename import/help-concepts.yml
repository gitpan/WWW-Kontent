pagename: "/help/concepts"
attributes: 
    kiki:content: "= Instances\n\nA Kontent instance is a collection of pages and the configuration information used to access them.  In other words, it's everything that makes up a particular site running Kontent, except the actual code.\n\n= Pages and paths\n\nPerhaps the most obvious concept in Kontent is that of a page.  Each Kontent page has a name, which can only contain alphanumeric characters and underscores; by convention it consists of the page's title in all-lowercase with spaces replaced with underscores and other special characters removed.  Each page can also have zero or more child pages.\n\nA path is a list of page names with a slash between each name; the path starts with a top-level page and then lists a child page, a grandchild page, and so on until the desired page is reached.  (Paths can also carry information about revision numbers, formats, and modes, concepts explained later.)  A path is used to identify a particular page in a Kontent instance.  A special kind of path, called a partial path, is sometimes used when a user edits a page to include a link; see [[Kolophon]] for more information on this.\n\n= Revisions and classes\n\nA far more important concept than that of a page is the revision.  Each page can have one or more revisions; each time a page is edited a new revision is created.  Revisions are numbered sequentially starting with 1; a particular revision of a page can be accessed by placing the revision number in square brackets after the page's name.  If no revision number is given, the most recent revision of the page is displayed.\n\nThe page itself doesn't contain the text or any other data directly associated with its content; that information belongs to the page's many revisions.  Each revision has a number of attributes.  Some of these contain the text and other data that makes up the revision's content.  Some describe the revision, such as the ``rev:author`` attribute, which contains the path to the user page of the person who made the changes.  Some of them have special meaning to Kontent; for example, the ``kontent:class`` revision controls a page's class.\n\nThe class (sometimes called the page class to avoid confusion with an identically-named construct in Perl) is arguably the most powerful concept in Kontent.  Each revision has a class; the class determines what information that revision keeps.  For example, a class for a dictionary entry might include information on a word's part of speech, pronunciation, and definition, while a class for a user page might include the user's e-mail address, password, and real name.\n\nOf course, this hypothetical user page probably shouldn't broadcast the user's password to the world.  Classes encompass not only the information the revision keeps but also the behavior it exhibits.  Different classes may display information in different forms and may even work in radically different ways behind the scenes.  An extreme example of this is the Kode class, which can be used to write a page with completely custom behavior by giving it code to run.\n\n= Modes and formats\n\nHow does a revision know when you're trying to look at it and when you're trying to edit it?  Each time you view a revision, you view it in a particular mode.  Typical modes include view (to see the revisions's content), history (to see a list of the page's revisions), create (to make a page under the current one), and edit (to revise the page).  Some classes have other modes; for example, the default User class includes a login mode to provide a password and log in as the user.\n\nOne interesting and somewhat unique feature of Kontent is the ability to view pages in multiple formats.  Each format shows the same information, but uses a different type of file format to do it.  The default is HTML, the //lingua franca// of the Web, but the same information could be shown in Adobe PDF, word processing, or computer-friendly XML if the appropriate renderers are installed.\n\nThe format of the page is specified by adding a dot to the end of the path, followed by the name of the format; the defualt is ``html``.  The mode is specified by placing it in curly brackets at the end of the path; the default is ``view``.  If both are present, the format should come first, followed by mode."
    kiki:type: "text/x-kolophon"
    kontent:class: "kiki"
    kontent:title: "Concepts"
    kontent:version: "1"
    rev:author: "/users/contributors"
    rev:log: "Initial page creation during import."
