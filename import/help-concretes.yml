pagename: "/help/concretes"
attributes: 
    kiki:content: "If you are simply trying to use a Kontent-based site, the [[Concepts]] section should be sufficient to understand Kontent; however, if you're administering a Kontent-based site or programming for Kontent, there are a few other concepts you should understand.\n\n= Stores and pools\n\nA Kontent instance needs a place to keep its pages and revisions; that place is called a store.  A store manages the storage and retrieval of pages and revisions from some (presumably permanent) piece of memory, such as a collection of files on disk, a database engine, or a version control system.\n\nEach Kontent instance also contains a pool, a collection on unversioned data.  Pools are used to store information that doesn't really belong to a single page, such as user sessions, search indices, and relationships between pages.\n\nPools, pages, and revisions are represented by the various classes in the ``WWW::Kontent::Store`` module; these are usually subclassed by store modules.\n\n= Classes revisited: drivers and adapters\n\nUser classes are internally divided into two basic parts.  The driver performs any actions associated with the class, such as revising pages, changing pool data, or performing complex calculations.  The adapter, on the other hand, concerns itself with displaying the page.  The adapter is not necessarily called when a page is accessed--in certain cases, such as displaying a page's revision history, it's unnecessary--but the driver always is.\n\nBoth driver and adapter are rolled into a class, which is represented by the ``WWW::Kontent::Class`` class; this is usually subclassed.\n\n= Renderers\n\nRenderers are intricately related to the concept of formats.  Each format supported by Kontent has a renderer associated with it; the renderer is responsible for outputting the page in the requested format.  Renderers are internally represented by the ``WWW::Kontent::Renderer`` class; this is usually subclassed.\n\n= Skeletons and parsers\n\nAt first glance, it would seem that the adapter and renderer perform the same job, but in reality they perform two different parts of that job.  The unifying factor is the skeleton, a tree data structure the adapter prepares for the renderer.  The skeleton contains all the text and formatting information the renderer needs to render the page.  Internally, skeletons are represented by the ``WWW::Kontent::Skeleton`` class.\n\nKontent also provides parsers to transform various markup languages into skeletons for you; in many cases, the view mode of an adapter does little more than call the appropriate parser.  These can be accessed through the ``WWW::Kontent::parse`` function.\n\n= Magic\n\nThe Magic facility is an important part of Kontent's customizability.  Magic allows modules to be notified when certain events happen in the system and act accordingly; for example, an access-control module could use Magic to perform its security checks at appropriate times, or a search plug-in could use Magic to reindex pages each time they're revised.\n\nNew hooks can be registered with the ``WWW::Kontent::register_magic`` function, and any registered hooks can be triggered by calling the request object's ``trigger_magic`` method.  See the documentation of those modules for further details."
    kiki:type: "text/x-kolophon"
    kontent:class: "kiki"
    kontent:title: "Concretes"
    kontent:version: "1"
    rev:author: "/users/contributors"
    rev:log: "Initial page creation during import."
